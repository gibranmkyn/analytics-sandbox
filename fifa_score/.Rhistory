world_cup_matches_filtered <- world_cup_matches[1:852,] %>%
select(Year, 'Datetime', 'Referee', 'Stadium', 'City', Stage, 'Attendance') %>%
filter(Stage %in% c('Group A', 'Group B', 'Group C', 'Group D', 'Group E', 'Group F', 'Group G', 'Group H'), Year >= 2004)
stadium_filtered <- stadium %>%
select(Stadium, Capacity)
# spectator <- merge(x = world_cup_matches_filtered, y = stadium_filtered, by = "Stadium", all.x = TRUE)
fuzzymerged <- stringdist_left_join(world_cup_matches_filtered,stadium_filtered, by="Stadium")
fuzzymerged
fuzzymerged <- stringdist_left_join(world_cup_matches_filtered,stadium_filtered, by="Stadium")
fuzzymerged
fuzzymerged <- stringdist_left_join(world_cup_matches_filtered,stadium_filtered, by="Stadium")
fuzzymerged$attendance_idx <- fuzzymerged$Attendance / fuzzymerged$Capacity
fuzzymerged
1+1
1+1
1+1
spectator %>%
distinct(Stadium, Capacity) %>%
filter(is.na(Capacity))
fuzzymerged %>%
distinct(Stadium.x, City, Capacity) %>%
filter(is.na(Capacity))
fuzzymerged <- stringdist_left_join(world_cup_matches_filtered,stadium_filtered, by="Stadium") %>%
mutate(spec_idx = ifelse(fuzzymerged$Attendance / fuzzymerged$Capacity > 1, 1, fuzzymerged$Attendance / fuzzymerged$Capacity))
fuzzymerged
fuzzymerged <- stringdist_left_join(world_cup_matches_filtered,stadium_filtered, by="Stadium") %>%
mutate(spec_idx = ifelse(fuzzymerged$Attendance / fuzzymerged$Capacity > 1, 1, fuzzymerged$Attendance / fuzzymerged$Capacity))
fuzzymerged
world_cup_matches
', 'Away Team Initials') %>%
world_cup_matches_filtered <- world_cup_matches[1:852,] %>%
select(Year, 'Datetime', 'Referee', 'Stadium', 'City', Stage, 'Attendance', 'Home Team Initials', 'Away Team Initials') %>%
filter(Stage %in% c('Group A', 'Group B', 'Group C', 'Group D', 'Group E', 'Group F', 'Group G', 'Group H'), Year >= 2004)
world_cup_matches_filtered
world_cup_matches_filtered <- world_cup_matches[1:852,] %>%
select(Year, 'Datetime', 'Stadium', 'City', Stage, 'Attendance', 'Home Team Initials', 'Away Team Initials') %>%
filter(Stage %in% c('Group A', 'Group B', 'Group C', 'Group D', 'Group E', 'Group F', 'Group G', 'Group H'), Year >= 2004)
world_cup_matches_filtered
fuzzymerged_1 <- fuzzymerged_1 %>%
mutate(the_team = 'Home Team Initials')
fuzzymerged_1 <- fuzzymerged %>%
mutate(the_team = 'Home Team Initials')
fuzzymerged_1
fuzzymerged_1 <- fuzzymerged %>%
mutate(the_team = Home Team Initials)
rm(list = ls()) # cleans the memory
library(tidyverse)
library(DataExplorer)
library(elo)
library(fuzzyjoin)
matches <- read_csv('fifa.csv')
rankings <- read_csv('fifa_ranking.csv')
world_cup_matches <- read_csv('WorldCupMatches.csv')
stadium <- read_csv('stadiums.csv')
world_cup_matches_filtered <- world_cup_matches[1:852,] %>%
select(Year, Datetime, Stadium, City, Stage, Attendance, HomeTeamInitials, AwayTeamInitials) %>%
filter(Stage %in% c('Group A', 'Group B', 'Group C', 'Group D', 'Group E', 'Group F', 'Group G', 'Group H'), Year >= 2004)
stadium_filtered <- stadium %>%
select(Stadium, Capacity)
# spectator <- merge(x = world_cup_matches_filtered, y = stadium_filtered, by = "Stadium", all.x = TRUE)
fuzzymerged <- stringdist_left_join(world_cup_matches_filtered,stadium_filtered, by="Stadium") %>%
mutate(spec_idx = ifelse(fuzzymerged$Attendance / fuzzymerged$Capacity > 1, 1, fuzzymerged$Attendance / fuzzymerged$Capacity))
fuzzymerged <- stringdist_left_join(world_cup_matches_filtered,stadium_filtered, by="Stadium") %>%
mutate(spec_idx = ifelse(fuzzymerged$Attendance / fuzzymerged$Capacity > 1, 1, fuzzymerged$Attendance / fuzzymerged$Capacity))
fuzzymerged <- stringdist_left_join(world_cup_matches_filtered,stadium_filtered, by="Stadium") %>%
mutate(spec_idx = ifelse(Attendance / Capacity > 1, 1, Attendance / Capacity))
fuzzymerged_1 <- fuzzymerged %>%
mutate(the_team = HomeTeamInitials)
fuzzymerged_1
fuzzymerged_2 <- fuzzymerged %>%
mutate(the_team = AwayTeamInitials)
bind_rows(fuzzymerged_1, fuzzymerged_2)
fuzzymerged_2
bind_rows(fuzzymerged_1, fuzzymerged_2)
bind_rows(fuzzymerged_1, fuzzymerged_2) %>%
group_by(the_team)
summarise(mean = mean(spec_idx))
bind_rows(fuzzymerged_1, fuzzymerged_2) %>%
group_by(the_team) %>%
summarise(mean = mean(spec_idx))
bind_rows(fuzzymerged_1, fuzzymerged_2) %>%
group_by(the_team) %>%
summarise(mean = mean(spec_idx)) %>%
arrange(desc(mean))
world_cup_matches_filtered <- world_cup_matches[1:852,] %>%
select(Year, Datetime, Stadium, City, Stage, Attendance, HomeTeamInitials, AwayTeamInitials) %>%
filter(Stage %in% c('Group A', 'Group B', 'Group C', 'Group D', 'Group E', 'Group F', 'Group G', 'Group H'), Year >= 2000)
world_cup_matches_filtered
world_cup_matches_filtered <- world_cup_matches[1:852,] %>%
select(Year, Datetime, Stadium, City, Stage, Attendance, HomeTeamInitials, AwayTeamInitials) %>%
filter(Stage %in% c('Group A', 'Group B', 'Group C', 'Group D', 'Group E', 'Group F', 'Group G', 'Group H'), Year >= 1999)
world_cup_matches_filtered %>%
filter(capacity == NA)
world_cup_matches_filtered %>%
filter(Capacity == NA)
fuzzymerged %>%
filter(Capacity == NA)
fuzzymerged %>%
filter(is.na(NA))
fuzzymerged %>%
filter(is.na(Capacity))
fuzzymerged %>%
filter(is.na(Capacity))
world_cup_matches_filtered <- world_cup_matches[1:852,] %>%
select(Year, Datetime, Stadium, City, Stage, Attendance, HomeTeamInitials, AwayTeamInitials) %>%
filter(Stage %in% c('Group A', 'Group B', 'Group C', 'Group D', 'Group E', 'Group F', 'Group G', 'Group H'), Year >= 1999)
stadium_filtered <- stadium %>%
select(Stadium, Capacity)
# spectator <- merge(x = world_cup_matches_filtered, y = stadium_filtered, by = "Stadium", all.x = TRUE)
fuzzymerged <- stringdist_left_join(world_cup_matches_filtered,stadium_filtered, by="Stadium") %>%
mutate(spec_idx = ifelse(Attendance / Capacity > 1, 1, Attendance / Capacity))
fuzzymerged %>%
filter(is.na(Capacity))
fuzzymerged %>%
filter(is.na(Capacity))
world_cup_matches_filtered <- world_cup_matches[1:852,] %>%
select(Year, Datetime, Stadium, City, Stage, Attendance, HomeTeamInitials, AwayTeamInitials) %>%
filter(Stage %in% c('Group A', 'Group B', 'Group C', 'Group D', 'Group E', 'Group F', 'Group G', 'Group H'), Year >= 2006)
stadium_filtered <- stadium %>%
select(Stadium, Capacity)
# spectator <- merge(x = world_cup_matches_filtered, y = stadium_filtered, by = "Stadium", all.x = TRUE)
fuzzymerged <- stringdist_left_join(world_cup_matches_filtered,stadium_filtered, by="Stadium") %>%
mutate(spec_idx = ifelse(Attendance / Capacity > 1, 1, Attendance / Capacity))
fuzzymerged %>%
filter(is.na(Capacity))
bind_rows(fuzzymerged_1, fuzzymerged_2) %>%
group_by(the_team) %>%
summarise(mean = mean(spec_idx)) %>%
arrange(desc(mean))
bind_rows(fuzzymerged_1, fuzzymerged_2) %>%
group_by(the_team) %>%
summarise(mean_spec_idx = mean(spec_idx)) %>%
arrange(desc(mean))
bind_rows(fuzzymerged_1, fuzzymerged_2) %>%
group_by(the_team) %>%
summarise(mean_spec_idx = mean(spec_idx)) %>%
arrange(desc(mean))
bind_rows(fuzzymerged_1, fuzzymerged_2) %>%
group_by(the_team) %>%
summarise(mean_spec_idx = mean(spec_idx)) %>%
arrange(desc(mean_spec_idx))
world_cup_matches_filtered <- world_cup_matches[1:852,] %>%
select(Year, Datetime, Stadium, City, Stage, Attendance, HomeTeamInitials, AwayTeamInitials) %>%
filter(Year >= 2006)
stadium_filtered <- stadium %>%
select(Stadium, Capacity)
fuzzymerged <- stringdist_left_join(world_cup_matches_filtered,stadium_filtered, by="Stadium") %>%
mutate(spec_idx = ifelse(Attendance / Capacity > 1, 1, Attendance / Capacity))
fuzzymerged %>%
filter(is.na(Capacity))
world_cup_matches_filtered <- world_cup_matches[1:852,] %>%
select(Year, Datetime, Stadium, City, Stage, Attendance, HomeTeamInitials, AwayTeamInitials) %>%
filter(Year >= 2006)
# filter(Stage %in% c('Group A', 'Group B', 'Group C', 'Group D', 'Group E', 'Group F', 'Group G', 'Group H'), Year >= 2006)
stadium_filtered <- stadium %>%
select(Stadium, Capacity)
# spectator <- merge(x = world_cup_matches_filtered, y = stadium_filtered, by = "Stadium", all.x = TRUE)
fuzzymerged <- stringdist_left_join(world_cup_matches_filtered,stadium_filtered, by="Stadium") %>%
mutate(spec_idx = ifelse(Attendance / Capacity > 1, 1, Attendance / Capacity))
fuzzymerged %>%
filter(is.na(Capacity))
fuzzymerged_1 <- fuzzymerged %>%
mutate(the_team = HomeTeamInitials)
fuzzymerged_2 <- fuzzymerged %>%
mutate(the_team = AwayTeamInitials)
bind_rows(fuzzymerged_1, fuzzymerged_2) %>%
group_by(the_team) %>%
summarise(mean_spec_idx = mean(spec_idx)) %>%
arrange(desc(mean_spec_idx))
world_cup_matches
world_cup_matches
bind_rows(fuzzymerged_1, fuzzymerged_2) %>%
group_by(the_team) %>%
summarise(mean_spec_idx = mean(spec_idx)) %>%
arrange(desc(mean_spec_idx))
bind_rows(fuzzymerged_1, fuzzymerged_2) %>%
group_by(the_team) %>%
summarise(mean_spec_idx = mean(spec_idx)) %>%
arrange(desc(mean_spec_idx))
fuzzymerged %>%
filter(is.na(Capacity))
fuzzymerged_1 <- fuzzymerged %>%
mutate(the_team = HomeTeamInitials)
fuzzymerged_2 <- fuzzymerged %>%
mutate(the_team = AwayTeamInitials)
fuzzymerged <- stringdist_left_join(world_cup_matches_filtered,stadium_filtered, by="Stadium") %>%
mutate(spec_idx = ifelse(Attendance / Capacity > 1, 1, Attendance / Capacity))
world_cup_matches
world_cup_matches_filtered <- world_cup_matches[1:852,] %>%
select(Year, Datetime, Stadium, City, Stage, Attendance, HomeTeamName, AwayTeamName, HomeTeamInitials, AwayTeamInitials) %>%
filter(Year >= 2006)
# filter(Stage %in% c('Group A', 'Group B', 'Group C', 'Group D', 'Group E', 'Group F', 'Group G', 'Group H'), Year >= 2006)
stadium_filtered <- stadium %>%
select(Stadium, Capacity)
# spectator <- merge(x = world_cup_matches_filtered, y = stadium_filtered, by = "Stadium", all.x = TRUE)
fuzzymerged <- stringdist_left_join(world_cup_matches_filtered,stadium_filtered, by="Stadium") %>%
mutate(spec_idx = ifelse(Attendance / Capacity > 1, 1, Attendance / Capacity))
fuzzymerged %>%
filter(is.na(Capacity))
fuzzymerged_1 <- fuzzymerged %>%
mutate(the_team = HomeTeamName)
fuzzymerged_2 <- fuzzymerged %>%
mutate(the_team = AwayTeamName)
bind_rows(fuzzymerged_1, fuzzymerged_2) %>%
group_by(the_team) %>%
summarise(mean_spec_idx = mean(spec_idx)) %>%
arrange(desc(mean_spec_idx))
world_cup_matches_filtered <- world_cup_matches[1:852,] %>%
select(Year, Datetime, Stadium, City, Stage, Attendance, HomeTeamName, AwayTeamName, HomeTeamInitials, AwayTeamInitials) %>%
filter(Year >= 2006)
# filter(Stage %in% c('Group A', 'Group B', 'Group C', 'Group D', 'Group E', 'Group F', 'Group G', 'Group H'), Year >= 2006)
stadium_filtered <- stadium %>%
select(Stadium, Capacity)
# spectator <- merge(x = world_cup_matches_filtered, y = stadium_filtered, by = "Stadium", all.x = TRUE)
fuzzymerged <- stringdist_left_join(world_cup_matches_filtered,stadium_filtered, by="Stadium") %>%
mutate(spec_idx = ifelse(Attendance / Capacity > 1, 1, Attendance / Capacity))
fuzzymerged %>%
filter(is.na(Capacity))
fuzzymerged_1 <- fuzzymerged %>%
mutate(the_team = HomeTeamName)
fuzzymerged_2 <- fuzzymerged %>%
mutate(the_team = AwayTeamName)
bind_rows(fuzzymerged_1, fuzzymerged_2) %>%
group_by(the_team) %>%
summarise(mean_spec_idx = mean(spec_idx)) %>%
arrange(desc(mean_spec_idx))
world_cup_matches_filtered <- world_cup_matches[1:852,] %>%
select(Year, Datetime, Stadium, City, Stage, Attendance, HomeTeamInitials, AwayTeamInitials) %>%
filter(Year >= 2006)
# filter(Stage %in% c('Group A', 'Group B', 'Group C', 'Group D', 'Group E', 'Group F', 'Group G', 'Group H'), Year >= 2006)
stadium_filtered <- stadium %>%
select(Stadium, Capacity)
# spectator <- merge(x = world_cup_matches_filtered, y = stadium_filtered, by = "Stadium", all.x = TRUE)
fuzzymerged <- stringdist_left_join(world_cup_matches_filtered,stadium_filtered, by="Stadium") %>%
mutate(spec_idx = ifelse(Attendance / Capacity > 1, 1, Attendance / Capacity))
fuzzymerged %>%
filter(is.na(Capacity))
fuzzymerged_1 <- fuzzymerged %>%
mutate(the_team = HomeTeamInitials)
fuzzymerged_2 <- fuzzymerged %>%
mutate(the_team = AwayTeamInitials)
bind_rows(fuzzymerged_1, fuzzymerged_2) %>%
group_by(the_team) %>%
summarise(mean_spec_idx = mean(spec_idx)) %>%
arrange(desc(mean_spec_idx))
fuzzymerged_1 %>%
filter(the_team == 'GER')
fuzzymerged_1 %>%
filter(the_team == 'DEu')
fuzzymerged_1 %>%
filter(the_team == 'DEU')
bind_rows(fuzzymerged_1, fuzzymerged_2) %>%
group_by(the_team) %>%
summarise(mean_spec_idx = mean(spec_idx)) %>%
arrange(desc(mean_spec_idx))
world_cup_matches_filtered <- world_cup_matches[1:852,] %>%
select(Year, Datetime, Stadium, City, Stage, Attendance, HomeTeamInitials, AwayTeamInitials) %>%
filter(Year >= 2006)
stadium_filtered <- stadium %>%
select(Stadium, Capacity)
fuzzymerged <- stringdist_left_join(world_cup_matches_filtered,stadium_filtered, by="Stadium") %>%
mutate(spec_idx = ifelse(Attendance / Capacity > 1, 1, Attendance / Capacity))
fuzzymerged
world_cup_matches_filtered <- world_cup_matches[1:852,] %>%
select(Year, Datetime, Stadium, City, Stage, Attendance, HomeTeamInitials, AwayTeamInitials) %>%
#  filter(Year >= 2006)
filter(Stage %in% c('Group A', 'Group B', 'Group C', 'Group D', 'Group E', 'Group F', 'Group G', 'Group H'), Year >= 2006)
fuzzymerged <- stringdist_left_join(world_cup_matches_filtered,stadium_filtered, by="Stadium") %>%
mutate(spec_idx = ifelse(Attendance / Capacity > 1, 1, Attendance / Capacity))
fuzzymerged %>%
filter(is.na(Capacity))
fuzzymerged_1 <- fuzzymerged %>%
mutate(the_team = HomeTeamInitials)
fuzzymerged_2 <- fuzzymerged %>%
mutate(the_team = AwayTeamInitials)
bind_rows(fuzzymerged_1, fuzzymerged_2) %>%
group_by(the_team) %>%
summarise(mean_spec_idx = mean(spec_idx)) %>%
arrange(desc(mean_spec_idx))
world_cup_matches_filtered <- world_cup_matches[1:852,] %>%
select(Year, Datetime, Stadium, City, Stage, Attendance, HomeTeamInitials, AwayTeamInitials) %>%
filter(Stage %in% c('Group A', 'Group B', 'Group C', 'Group D', 'Group E', 'Group F', 'Group G', 'Group H'), Year >= 2006)
stadium_filtered <- stadium %>%
select(Stadium, Capacity)
spectators <- stringdist_left_join(world_cup_matches_filtered,stadium_filtered, by="Stadium") %>%
mutate(spec_idx = ifelse(Attendance / Capacity > 1, 1, Attendance / Capacity))
spectators %>%
filter(is.na(Capacity))
spectators_1 <- spectators %>%
mutate(the_team = HomeTeamInitials)
spectators_2 <- spectators %>%
mutate(the_team = AwayTeamInitials)
bind_rows(spectators_1, spectators_2) %>%
group_by(the_team) %>%
summarise(mean_spec_idx = mean(spec_idx)) %>%
arrange(desc(mean_spec_idx))
# ----- Prepare the dataset
world_cup_matches_filtered <- world_cup_matches[1:852,] %>%
select(Year, Datetime, Stadium, City, Stage, Attendance, HomeTeamInitials, AwayTeamInitials) %>%
filter(Stage %in% c('Group A', 'Group B', 'Group C', 'Group D', 'Group E', 'Group F', 'Group G', 'Group H'), Year >= 2006)
stadium_filtered <- stadium %>%
select(Stadium, Capacity)
# ----- Join worldcup matches with stadium and calculat attendance index
attend <- stringdist_left_join(world_cup_matches_filtered,stadium_filtered, by="Stadium") %>%
mutate(attend_idx = ifelse(Attendance / Capacity > 1, 1, Attendance / Capacity))
attend %>% filter(is.na(Capacity)) #check if capacity is unknown
attend_1 <- attend %>%
mutate(the_team = HomeTeamInitials)
attend_2 <- attend %>%
mutate(the_team = AwayTeamInitials)
bind_rows(attend_1, attend_2) %>%
group_by(the_team) %>%
summarise(mean_attend_idx = mean(attend_idx)) %>%
arrange(desc(mean_attend_idx))
attend_1 <- attend %>%
mutate(the_team = HomeTeamInitials)
attend_2 <- attend %>%
mutate(the_team = AwayTeamInitials)
bind_rows(attend_1, attend_2) %>%
group_by(the_team) %>%
summarise(mean_attend_idx = mean(attend_idx)) %>%
arrange(desc(mean_attend_idx))
ggplot(attend_merged, x=the_team, y = mean_attend_idx)
attend_merged <- bind_rows(attend_1, attend_2) %>%
group_by(the_team) %>%
summarise(mean_attend_idx = mean(attend_idx)) %>%
arrange(desc(mean_attend_idx))
ggplot(attend_merged, x=the_team, y = mean_attend_idx)
ggplot(attend_merged, x=the_team, y = mean_attend_idx)
ggplot2(attend_merged, x=the_team, y = mean_attend_idx)
ggplot(attend_merged, x=the_team, y = mean_attend_idx)
ggplot(attend_merged, aes(x=the_team, y = mean_attend_idx)) +
geom_bar
ggplot(attend_merged, aes(x=the_team, y = mean_attend_idx)) +
geom_bar(stat="identity")
attend_merged
ggplot(attend_merged, aes(x=the_team, y = mean_attend_idx)) +
geom_bar(stat="identity")
ggplot(attend_merged, aes(x=mean_attend_idx, y = the_team)) +
geom_bar(stat="identity")
ggplot(attend_merged, aes(x=mean_attend_idx, y = the_team)) +
geom_bar(stat="identity") +
coord_flip()
ggplot(attend_merged, aes(x= the_team, y = mean_attend_idx)) +
geom_bar(stat="identity") +
coord_flip()
geom_bar(stat="identity") +
ggplot(attend_merged, aes(x= the_team, y = mean_attend_idx) +
geom_bar(stat="identity") +
coord_flip()
ggplot(attend_merged, aes(x= the_team, y = mean_attend_idx)) +
ggplot(attend_merged, aes(x=mean_attend_idx, y = the_team)) +
geom_bar(stat="identity") +
coord_flip()
ggplot(attend_merged, aes(x= the_team, y = mean_attend_idx)) +
geom_bar(stat="identity") +
coord_flip()
ggplot(attend_merged, aes(x= the_team, y = mean_attend_idx)) +
geom_bar(stat="identity", width=0.4, position = position_dodge(width=0.5)) +
coord_flip()
ggplot(attend_merged, aes(x= the_team, y = mean_attend_idx)) +
geom_bar(stat="identity", width=1, position = position_dodge(width=0.5)) +
coord_flip()
ggplot(attend_merged, aes(x= the_team, y = mean_attend_idx)) +
geom_bar(stat="identity", width=1, position = position_dodge(width=0.1)) +
coord_flip()
ggplot(attend_merged, aes(x= the_team, y = mean_attend_idx)) +
geom_bar(stat="identity", width=0.5, position = position_dodge(width=0.5)) +
coord_flip()
ggplot(attend_merged, aes(x= the_team, y = mean_attend_idx)) +
geom_bar(stat="identity", width=1, position = position_dodge(width=0.5)) +
coord_flip()
attend
ggplot(attend_merged, aes(x= the_team, y = mean_attend_idx)) +
geom_bar(stat="identity", width=1, position = position_dodge(width=0.5)) +
coord_flip()
attend
#write.csv(elo_ranking, "elo_ranking_fifa2006.csv")
write.csv(attend, "attend.csv")
rm(list = ls()) # cleans the memory
library(xml2)
library(rvest)
library(stringr)
library(dplyr)
library(tm)
library(qdap) # Quantitative Discourse Analysis Package
library(ggplot2)
library(tidyr)
library(RCurl) # download files
library(readr) # read from zip
library(stringr)
library(RSQLite)
rm(list = ls()) # cleans the memory
library(xml2)
library(rvest)
library(stringr)
library(dplyr)
library(tm)
library(qdap) # Quantitative Discourse Analysis Package
library(ggplot2)
library(tidyr)
library(RCurl) # download files
library(readr) # read from zip
library(stringr)
library(RSQLite)
# library(plyr)
library(cld3) # language detector
rm(list = ls()) # cleans the memory
library(xml2)
library(rvest)
library(stringr)
library(dplyr)
library(tm)
library(qdap) # Quantitative Discourse Analysis Package
library(ggplot2)
library(tidyr)
library(RCurl) # download files
library(readr) # read from zip
library(stringr)
library(RSQLite)
# library(plyr)
library(cld3) # language detector
# ----- Pre-ETL investigation to get all columns and select the columns needed
# Create a function to make a sample of 1 row from each dataset and combine them to get an idea what columns we have
get_sample <- function(folder_path, pattern) {
listed_files <- list.files(folder_path, pattern = pattern)
main_df <- data.frame()
for (i in 1:length(listed_files)) {
file_path <-paste(folder_path, listed_files[i],sep="/")
local_df <- read.csv(file_path, nrows= 1, stringsAsFactors=FALSE)
#local_df <- read_csv(file_path, n_max = 1)
local_df$file_name <-listed_files[i]
main_df <- plyr::rbind.fill(main_df, local_df)
}
return(main_df)
}
# Generate the sample
listings_sample <- get_sample(folder_path = "dataset", pattern = "listings.csv.gz")
reviews_sample <- get_sample(folder_path = "dataset", pattern = "reviews.csv.gz")
reviews_sample$date <- as.Date(reviews_sample$date)
# ----- Initiation
conn <- dbConnect(RSQLite::SQLite(), "inside_airbnb.db") # connect to SQLite db, in this case, it created a new db
# ----- Build ETL workflow for listings data and reviews data
normalise_listings <- function(listings_data) {
hosts_table <- listings_data %>%
select(starts_with('host'), -contains("url")) %>%
distinct(host_id, .keep_all = TRUE)
listings_table <- listings_data %>%
select(-c(contains("url"), host_name:host_identity_verified, scrape_id, last_scraped, space, host_listings_count, smart_location))
dbWriteTable(conn,"host", hosts_table, append = TRUE)
dbWriteTable(conn,"listing", listings_table, append = TRUE)
}
normalise_reviews <- function(reviews_data) {
reviewers_table <- reviews_data %>%
distinct(reviewer_id, reviewer_name)
reviews_table <- reviews_data %>%
mutate(lang = detect_language(comments)) %>%
filter(lang = 'en')  %>%
select(-reviewer_name)
dbWriteTable(conn,"review", reviews_table, append = TRUE)
dbWriteTable(conn,"reviewer", reviewers_table, append = TRUE)
}
# ----- Automatically use sample data to create schema
normalise_reviews(reviews_sample)
# ----- Initiation
conn <- dbConnect(RSQLite::SQLite(), "inside_airbnb.db") # connect to SQLite db, in this case, it created a new db
# ----- Build ETL workflow for listings data and reviews data
normalise_listings <- function(listings_data) {
hosts_table <- listings_data %>%
select(starts_with('host'), -contains("url")) %>%
distinct(host_id, .keep_all = TRUE)
listings_table <- listings_data %>%
select(-c(contains("url"), host_name:host_identity_verified, scrape_id, last_scraped, space, host_listings_count, smart_location))
dbWriteTable(conn,"host", hosts_table, append = TRUE)
dbWriteTable(conn,"listing", listings_table, append = TRUE)
}
normalise_reviews <- function(reviews_data) {
reviewers_table <- reviews_data %>%
distinct(reviewer_id, reviewer_name)
reviews_table <- reviews_data %>%
mutate(lang = detect_language(comments)) %>%
filter(lang == 'en')  %>%
select(-reviewer_name)
dbWriteTable(conn,"review", reviews_table, append = TRUE)
dbWriteTable(conn,"reviewer", reviewers_table, append = TRUE)
}
# ----- Automatically use sample data to create schema
normalise_reviews(reviews_sample)
normalise_listings(listings_sample)
# ----- Clear tables, ready to be inserted.
dbGetQuery(conn, "DELETE FROM review")
dbGetQuery(conn, "DELETE FROM reviewer")
dbGetQuery(conn, "DELETE FROM listing")
dbGetQuery(conn, "DELETE FROM host")
start_time <- Sys.time()
folder_path <- "dataset"
listings_list <-list.files(folder_path, pattern = "listings.csv.gz")
reviews_list <-list.files(folder_path, pattern = "reviews.csv.gz")
# ----- Run ETL to normalise listings.csv.gz and store in a relational schema
for (i in 1:length(listings_list)) {
file_path <-paste(folder_path, listings_list[i],sep="/")
listings_data <- read_csv(file_path)
listings_data$file_name <-listings_list[i]
normalise_listings(listings_data) # call function built especially to normalise listings
}
# ----- Run ETL to normalise reviews.csv.gz and store in a relational schema
for (i in 1:length(reviews_list)) {
file_path <-paste(folder_path, reviews_list[i],sep="/")
reviews_data <- read_csv(file_path)
reviews_data$file_name <- reviews_list[i]
normalise_reviews(reviews_data)
}
